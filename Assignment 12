INCLUDE Irvine32.inc
					;Using a loop and indexed addressing, 
					;write code that rotates the members of a 32-bit integer array 
					;forward one position.  The value at the end 
					;of the array must wrap around to the first position.	
					;For example, the array [10,20,30,40] 
					;would be transformed into [40,10,20,30]
.data
myArray DWORD 10, 20, 30, 40			
sizeOfElement DWORD ($-myArray)/4
.code
main proc

mov ecx, 4					;LOOP counter
mov ebx, 0 
PRINTLOOP1:
	mov eax, myArray[ebx]
	Call WriteInt
	add ebx, sizeOfElement
	
LOOP PRINTLOOP1
Call Crlf

mov ecx, 3
mov ebx, 0
mov esi, 0
L2:
	add esi, sizeOfElement	;	myArray[esi] -> 20	;	myArray[esi] -> 30	;	myArray[esi] -> 40 
	mov edx, myArray[ebx]	;	edx = 10	;	edx = 20	;	edx = 30
	mov eax, myArray[esi]	;	eax = 20	;	eax = 30	;	eax = 40
	mov myArray[esi], edx	;	10, 10, 30, 40	; 20, 10, 20, 40	;	20, 10, 20, 30
	mov myArray[ebx], eax	;	20, 10, 30, 40	; 30, 10, 20, 40	;	40, 10, 20, 30

LOOP L2

mov ecx, 4					;LOOP counter
mov ebx, 0 
L3:
	mov eax, myArray[ebx]
	Call WriteInt
	add ebx, sizeOfElement
	
LOOP L3
Call Crlf

Invoke ExitProcess,0
main ENDP
END main
