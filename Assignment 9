1.Briefly describe the concept of "Stack Frame"
- A stack frame is memory that has been allocated for the use of a given procedure/function during runtime of a program. The stack frame is used to store variables, parameters, and temporary locations of the procedure. After the procedure returns, the stack frame is cleared and removed from the stack and the program proceeds from the calling procedure.

2.Briefly describe the concept of a "Calling Convention"
- Calling convention in programming is used to describe how a given code's subroutine's calls and parameters are managed and how they return a result. Calling convention also has to do with how the stack is managed when a function is called and returned.

3. Why do the book examples always start functions with "push ebp" and "mov ebp,esp" (2 points)

- "push ebp" saves the previous call by pushing the ebp frame pointer onto the runtime stack thus allowing the program to have a point to return to once a function's processes end and ebp is "popped" off the runtime stack. 
- "mov ebp, esp" saves the stack pointer into ebp so that ebp now points to the stack frame of the funtion.

4.  What is the x64 equivalent to "push epb" and "mov ebp,esp?
- push rbp
  mov rbp, rsp

5. What are the differences between "Microsoft x64 calling convention" and "System V AMD64 ABI calling convention"


6. Upon entry to myFunction (above), what does the stack look like when using Microsoft x64 calling convention? 
- a|b|c|d|e|f
